AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Services with ALB and Service Connect for Specific Communication

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]

  # ECS Cluster
  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyECSCluster

  # Security Group for ALB
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  # Target Group for Service1
  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /health

  # Load Balancer Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1

  # Task Definition for Service1 (ALB Accessible)
  Service1TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: Service1TaskDefinition
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: MyContainer1
          Image: amazon/amazon-ecs-sample
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp

  # ECS Service for Service1 (ALB Accessible)
  Service1:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref Service1TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref LoadBalancerSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: MyContainer1
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup1
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: MyServiceConnectNamespace
        Services:
          - PortName: http
            ClientAliases:
              - Port: 80
                DnsName: service1.my-namespace.local
            DiscoveryName: service1
        Tags:
          - Key: X-Service-Tag
            Value: v1

  # Task Definition for Service2 (Internal)
  Service2TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: Service2TaskDefinition
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: MyContainer2
          Image: amazon/amazon-ecs-sample
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp

  # ECS Service for Service2 (Internal Service)
  Service2:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref Service2TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          AssignPublicIp: ENABLED
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: MyServiceConnectNamespace
        Services:
          - PortName: http
            ClientAliases:
              - Port: 80
                DnsName: service2.my-namespace.local
            DiscoveryName: service2
        Tags:
          - Key: X-Service-Tag
            Value: v2

  # VPC Endpoint for Service Connect
  ServiceConnectVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecs"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
